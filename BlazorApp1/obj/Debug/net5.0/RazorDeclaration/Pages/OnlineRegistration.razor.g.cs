// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorApp1.Pages
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Mohamed El-maghraby\source\repos\BlazorApp1\BlazorApp1\_Imports.razor"
using System.Net.Http

#nullable disable
    ;
#nullable restore
#line 2 "C:\Users\Mohamed El-maghraby\source\repos\BlazorApp1\BlazorApp1\_Imports.razor"
using System.Net.Http.Json

#nullable disable
    ;
#nullable restore
#line 3 "C:\Users\Mohamed El-maghraby\source\repos\BlazorApp1\BlazorApp1\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms

#nullable disable
    ;
#nullable restore
#line 4 "C:\Users\Mohamed El-maghraby\source\repos\BlazorApp1\BlazorApp1\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing

#nullable disable
    ;
#nullable restore
#line 5 "C:\Users\Mohamed El-maghraby\source\repos\BlazorApp1\BlazorApp1\_Imports.razor"
using Microsoft.AspNetCore.Components.Web

#nullable disable
    ;
#nullable restore
#line 6 "C:\Users\Mohamed El-maghraby\source\repos\BlazorApp1\BlazorApp1\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization

#nullable disable
    ;
#nullable restore
#line 7 "C:\Users\Mohamed El-maghraby\source\repos\BlazorApp1\BlazorApp1\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http

#nullable disable
    ;
#nullable restore
#line 8 "C:\Users\Mohamed El-maghraby\source\repos\BlazorApp1\BlazorApp1\_Imports.razor"
using Microsoft.JSInterop

#nullable disable
    ;
#nullable restore
#line 9 "C:\Users\Mohamed El-maghraby\source\repos\BlazorApp1\BlazorApp1\_Imports.razor"
using BlazorApp1

#nullable disable
    ;
#nullable restore
#line 10 "C:\Users\Mohamed El-maghraby\source\repos\BlazorApp1\BlazorApp1\_Imports.razor"
using BlazorApp1.Shared

#line default
#line hidden
#nullable disable
    ;
    [global::Microsoft.AspNetCore.Components.RouteAttribute(
    // language=Route,Component
#nullable restore
#line 1 "C:\Users\Mohamed El-maghraby\source\repos\BlazorApp1\BlazorApp1\Pages\OnlineRegistration.razor"
      "/online-registration"

#line default
#line hidden
#nullable disable
    )]
    #nullable restore
    public partial class OnlineRegistration : global::Microsoft.AspNetCore.Components.ComponentBase
    #nullable disable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 243 "C:\Users\Mohamed El-maghraby\source\repos\BlazorApp1\BlazorApp1\Pages\OnlineRegistration.razor"
       

    // Properties to hold student data
    private int Id { get; set; }
    private string Name { get; set; }
    private int Age { get; set; }
    private float GPA { get; set; }
    private int TotAchieved { get; set; }
    private int Term { get; set; }
    private string DepName { get; set; }
    private string Sponser { get; set; }
    private string College { get; set; }
    private string NumberofCredit { get; set; }
    private bool Registered { get; set; }
    private List<ScheduleGroupViewModel> a { get; set; }
    private List<ClassLibrary1.RegisteredCourseDto> c { get; set; }
    private bool isRegistrationSuccessful = false;
    private Dictionary<int, int> selectedGroups = new Dictionary<int, int>(); // CourseId -> CourseGroupId
    private List<string> daysOfWeek = new List<string> { "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday" };
    private Dictionary<string, string[]> daySlots = new Dictionary<string, string[]>
{
    { "Saturday", new string[4] { "", "", "", "" } },
    { "Sunday", new string[4] { "", "", "", "" } },
    { "Monday", new string[4] { "", "", "", "" } },
    { "Tuesday", new string[4] { "", "", "", "" } },
    { "Wednesday", new string[4] { "", "", "", "" } },
    { "Thursday", new string[4] { "", "", "", "" } },
    { "Friday", new string[4] { "", "", "", "" } }
};

    protected override async Task OnInitializedAsync()
    {
        // Retrieve query parameters from the URL
        var uri = new Uri(UriHelper.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        Id = int.Parse(queryParams["id"]);
        Name = queryParams["name"];
        Age = int.Parse(queryParams["age"]);
        GPA = float.Parse(queryParams["gpa"]);
        TotAchieved = int.Parse(queryParams["totAchieved"]);
        Term = int.Parse(queryParams["term"]);
        DepName = queryParams["depName"];
        Sponser = queryParams["sponser"];
        College = queryParams["college"];
        Registered = queryParams["registered"] == "True" ?  true :false ;
        a = System.Text.Json.JsonSerializer.Deserialize<List<ScheduleGroupViewModel>>(queryParams["schedule"]);
        if (Registered )
        {try
            {c = (await StudentConsumer.GetRegisteredCourses(Id)).ToList();
                if(c != null)
                {
                    foreach(var x in c)
                    {
                        selectedGroups[x.CourseId] = x.GroupId;
                        UpdateDaySlots(x.GroupId, x.CourseId, "Add");
                    }
                }
                
            }
            catch(Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }

        
    }
    private void NavigateToConfirmationPage()
    {
        isRegistrationSuccessful = false;
        Navigation.NavigateTo("/");
    }
    private async Task ConfirmRegistration()
    {
        // Create a new instance of addSchedule

        var addedd = new List<ClassLibrary1.addSchedule>();

        foreach (var dataEntry in selectedGroups)
        {
            var selected = new ClassLibrary1.addSchedule
            {
                studentId =Id,
                CourseId=dataEntry.Key,
                GroupId = dataEntry.Value
            };
            addedd.Add(selected);
        }
        try
        {
            var response = await StudentConsumer.PostRegisteredCourses(addedd);
            isRegistrationSuccessful = true;
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }





        // Logic to handle navigation or save data can go here
        // For example, you could pass this data to another component, save it to a database, or serialize it as needed.
        //Navigation.NavigateTo("/confirmation");
    }

    public class ScheduleviewModel
    {
        public string CourseName { get; set; }
        public int CourseId { get; set; }
        public string CoursePeriod { get; set; }
        public int CourseGroupId { get; set; }
        public string DoctorName { get; set; }
        public string TAName { get; set; }
        public string Lecday { get; set; }
        public string Secday { get; set; }
        public int LecSlot { get; set; }
        public int SecSlot { get; set; }
        public int CourseCreditHours { get; set; }
        public int Id { get; set; }
        public int capacity { get; set; }
    }
    private void OnGroupSelected(ChangeEventArgs e, ScheduleGroupViewModel group)
    {
        int selectedGroupId = int.Parse(e.Value.ToString());
        if (selectedGroupId == 0)
        {
            //Console.WriteLine('0');
            //selectedGroups.Remove(group.CourseId);
            UpdateDaySlots(0, group.CourseId, "Delete");
        }
        else if(selectedGroups.Count == 6)
        {
            JS.InvokeVoidAsync("alert", "Max 18 Credit Hours ");

        }
        else
        {
            selectedGroups[group.CourseId] = selectedGroupId;
            if (selectedGroups.Keys.Contains(group.CourseId))
            {
                UpdateDaySlots(selectedGroupId, group.CourseId, "Update");
            }
            else
            {

                UpdateDaySlots(selectedGroupId, group.CourseId, "Add");
            }
        }
        //foreach (var kvp in selectedGroups)
        //{
        //  Console.WriteLine($"Key: {kvp.Key}");
        // Console.WriteLine("Values: " + string.Join(", ", kvp.Value));
        //}
        // Update daySlots when a group is selected


    }
    private void UpdateDaySlots(int groupid,int courseid,string mode)
    {
        var group = a.FirstOrDefault(g => g.CourseId == courseid);
        if (group == null) return;

        var schedule = group.Schedules.FirstOrDefault(s => s.CourseGroupId == groupid);
        if (schedule == null) return;

        // Remove existing course entry if updating
        if (mode == "Update")
        {
            foreach (var day in daysOfWeek)
            {
                for (int slot = 0; slot < daySlots[day].Length; slot++)
                {
                    if (daySlots[day][slot].StartsWith(group.CourseName))
                    {
                        daySlots[day][slot] = ""; // Clear the slot
                    }
                }
            }
        }

        // Add course name to new slots if no conflict
        if (daySlots[schedule.Lecday][schedule.LecSlot - 1] == "" && daySlots[schedule.Secday][schedule.SecSlot - 1] == ""  )
        {
            if (schedule.capacity > 0)
            {
                daySlots[schedule.Lecday][schedule.LecSlot - 1] = $"{group.CourseName} <br/> {schedule.DoctorName} <br/> Lecture";
                daySlots[schedule.Secday][schedule.SecSlot - 1] = $"{group.CourseName} <br/> {schedule.TAName} <br/> Section";
                Console.WriteLine(schedule.capacity);
            }
            else
            {
                JS.InvokeVoidAsync("alert", "No Available Capacity");
                selectedGroups.Remove(courseid);
                return;
            }

        }
        else
        {
            JS.InvokeVoidAsync("alert", "Course Crashh");
            selectedGroups.Remove(courseid);
        }

        // Optional: Debug output to console
        foreach (var kvp in daySlots)
        {
            // Console.WriteLine($"Key: {kvp.Key}");
            // Console.WriteLine("Values: " + string.Join(", ", kvp.Value));
        }



    }
    private void DeleteCourse(string CourseName ,int CourseId)
    {
        foreach (var day in daysOfWeek)
        {
            for (int slot = 0; slot < daySlots[day].Length; slot++)
            {
                if (daySlots[day][slot].StartsWith(CourseName))
                {
                    daySlots[day][slot] = ""; // Clear the slot
                }
            }
        }
        selectedGroups.Remove(CourseId);
    }


    public class ScheduleGroupViewModel
    {
        public int CourseCreditHours { get; set; }
        public string CourseName { get; set; }
        public string CoursePeriod { get; set; }

        public int CourseId { get; set; } 
        public List<ScheduleviewModel> Schedules { get; set; }
    }
    public class addSchedule
    {
        public int studentId { get; set; }
        public int GroupId { get; set; }
        public int CourseId { get; set; }

    }
    public class RegisteredCourseDto
    {
        public int CourseId { get; set; }
        public int GroupId { get; set; }
    }
    

#line default
#line hidden
#nullable disable

        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 5 "C:\Users\Mohamed El-maghraby\source\repos\BlazorApp1\BlazorApp1\Pages\OnlineRegistration.razor"
        IJSRuntime

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 5 "C:\Users\Mohamed El-maghraby\source\repos\BlazorApp1\BlazorApp1\Pages\OnlineRegistration.razor"
                   JS

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 4 "C:\Users\Mohamed El-maghraby\source\repos\BlazorApp1\BlazorApp1\Pages\OnlineRegistration.razor"
        BlazorApp1.DataConsumers.StudentConsumer

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 4 "C:\Users\Mohamed El-maghraby\source\repos\BlazorApp1\BlazorApp1\Pages\OnlineRegistration.razor"
                                                 StudentConsumer

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 3 "C:\Users\Mohamed El-maghraby\source\repos\BlazorApp1\BlazorApp1\Pages\OnlineRegistration.razor"
        Microsoft.AspNetCore.Components.NavigationManager

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 3 "C:\Users\Mohamed El-maghraby\source\repos\BlazorApp1\BlazorApp1\Pages\OnlineRegistration.razor"
                                                          UriHelper

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 2 "C:\Users\Mohamed El-maghraby\source\repos\BlazorApp1\BlazorApp1\Pages\OnlineRegistration.razor"
        NavigationManager

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 2 "C:\Users\Mohamed El-maghraby\source\repos\BlazorApp1\BlazorApp1\Pages\OnlineRegistration.razor"
                          Navigation

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
    }
}
#pragma warning restore 1591
